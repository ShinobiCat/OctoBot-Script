//@version=6
import TradingView/ta/8

strategy("Scalping OctoBot Webhook", pyramiding=2, overlay=true)

// === CONFIGURATION ===
hma_length = 9
atr_length = 14
atr_multiplier = 1.5
trailing_atr_multiplier = 1.0

// === LIQUIDITY & SPREAD ANALYSIS ===
bid_price = request.security(syminfo.tickerid, "1", bid, lookahead=barmerge.lookahead_on)
ask_price = request.security(syminfo.tickerid, "1", ask, lookahead=barmerge.lookahead_on)
bid_ask_spread = ask_price > bid_price ? ask_price - bid_price : na
min_spread = 0.0001
rolling_avg_spread = ta.sma(math.max(bid_ask_spread, min_spread), 14)
liquidity_threshold_input = input.float(0.02, title="Liquidity Threshold", step=0.01)
liquidity_threshold = rolling_avg_spread > liquidity_threshold_input ? 2.0 : 1.0

// === TREND INDICATORS ===
// === AVERAGE TRUE RANGE (ATR) ===
atr = ta.rma(ta.tr(true), atr_length)

// Hull Moving Average (HMA)
hma = ta.wma(2 * ta.wma(close, hma_length / 2) - ta.wma(close, hma_length), math.floor(math.sqrt(hma_length)))
plot(hma, "HMA", color=color.blue)

// Exponential Moving Average (EMA)
higher_tf_ema = request.security(syminfo.tickerid, "60", ta.ema(close, 50))

// Heikin-Ashi Trend Confirmation
ha_close = (open + high + low + close) / 4
ha_open = ta.ema((open + close) / 2, 3)
ha_trend_smooth = ta.ema(ha_close, 5)
is_ha_trend_up = ha_trend_smooth > ha_open
is_ha_trend_down = ha_trend_smooth < ha_open

// Moving Average Convergence Divergence (MACD)
fastLength = 12
slowLength = 26
MACDLength = 9
MACD = ta.ema(close, fastLength) - ta.ema(close, slowLength)
aMACD = ta.ema(MACD, MACDLength)
delta = MACD - aMACD

// === VWAP ===
hideonDWM = input(false, title="Hide VWAP on 1D or Above", group="VWAP Settings", display=display.data_window)
anchor = input.string(defval="Session", title="Anchor Period", options=["Session", "Week", "Month", "Quarter", "Year", "Decade", "Century", "Earnings", "Dividends", "Splits"], group="VWAP Settings")
src = input(title="Source", defval=hlc3, group="VWAP Settings", display=display.data_window)
offset = input.int(0, title="Offset", group="VWAP Settings", minval=0, display=display.data_window)

calcModeInput = input.string("Standard Deviation", "Bands Calculation Mode", options=["Standard Deviation", "Percentage"], group="Bands Settings", display=display.data_window)
showBand_1 = input(true, title="", group="Bands Settings", inline="band_1", display=display.data_window)
bandMult_1 = input.float(1.0, title="Bands Multiplier #1", group="Bands Settings", inline="band_1", step=0.5, minval=0, display=display.data_window)
showBand_2 = input(false, title="", group="Bands Settings", inline="band_2", display=display.data_window)
bandMult_2 = input.float(2.0, title="Bands Multiplier #2", group="Bands Settings", inline="band_2", step=0.5, minval=0, display=display.data_window)
showBand_3 = input(false, title="", group="Bands Settings", inline="band_3", display=display.data_window)
bandMult_3 = input.float(3.0, title="Bands Multiplier #3", group="Bands Settings", inline="band_3", step=0.5, minval=0, display=display.data_window)

// Calculate Volume Weighted Average Price
volume_sma = ta.sma(volume, 10)

// Cumulative Volume Delta
cumVolume = ta.cum(volume)
if barstate.islast and cumVolume == 0
    runtime.error("No volume is provided by the data vendor.")

new_earnings = request.earnings(syminfo.tickerid, earnings.actual, barmerge.gaps_on, barmerge.lookahead_on, ignore_invalid_symbol=true)
new_dividends = request.dividends(syminfo.tickerid, dividends.gross, barmerge.gaps_on, barmerge.lookahead_on, ignore_invalid_symbol=true)
new_split = request.splits(syminfo.tickerid, splits.denominator, barmerge.gaps_on, barmerge.lookahead_on, ignore_invalid_symbol=true)

isNewPeriod = switch anchor
    "Earnings"  => not na(new_earnings)
    "Dividends" => not na(new_dividends)
    "Splits"    => not na(new_split)
    "Session"   => timeframe.change("D")
    "Week"      => timeframe.change("W")
    "Month"     => timeframe.change("M")
    "Quarter"   => timeframe.change("3M")
    "Year"      => timeframe.change("12M")
    "Decade"    => timeframe.change("12M") and year % 10 == 0
    "Century"   => timeframe.change("12M") and year % 100 == 0
    => false

isEsdAnchor = anchor == "Earnings" or anchor == "Dividends" or anchor == "Splits"
if na(src[1]) and not isEsdAnchor
    isNewPeriod := true

float vwapValue = na
float upperBandValue1 = na
float lowerBandValue1 = na
float upperBandValue2 = na
float lowerBandValue2 = na
float upperBandValue3 = na
float lowerBandValue3 = na

if not (hideonDWM and timeframe.isdwm)
    [_vwap, _stdevUpper, _] = ta.vwap(src, isNewPeriod, 1)
    vwapValue := _vwap
    stdevAbs = _stdevUpper - _vwap
    bandBasis = calcModeInput == "Standard Deviation" ? stdevAbs : _vwap * 0.01
    upperBandValue1 := _vwap + bandBasis * bandMult_1
    lowerBandValue1 := _vwap - bandBasis * bandMult_1
    upperBandValue2 := _vwap + bandBasis * bandMult_2
    lowerBandValue2 := _vwap - bandBasis * bandMult_2
    upperBandValue3 := _vwap + bandBasis * bandMult_3
    lowerBandValue3 := _vwap - bandBasis * bandMult_3

plot(vwapValue, title="VWAP", color=#2962FF, offset=offset)

upperBand_1 = plot(upperBandValue1, title="Upper Band #1", color=color.green, offset=offset, display=showBand_1 ? display.all : display.none, editable=showBand_1)
lowerBand_1 = plot(lowerBandValue1, title="Lower Band #1", color=color.green, offset=offset, display=showBand_1 ? display.all : display.none, editable=showBand_1)
fill(upperBand_1, lowerBand_1, title="Bands Fill #1", color=color.new(color.green, 95), display=showBand_1 ? display.all : display.none, editable=showBand_1)

upperBand_2 = plot(upperBandValue2, title="Upper Band #2", color=color.olive, offset=offset, display=showBand_2 ? display.all : display.none, editable=showBand_2)
lowerBand_2 = plot(lowerBandValue2, title="Lower Band #2", color=color.olive, offset=offset, display=showBand_2 ? display.all : display.none, editable=showBand_2)
fill(upperBand_2, lowerBand_2, title="Bands Fill #2", color=color.new(color.olive, 95), display=showBand_2 ? display.all : display.none, editable=showBand_2)

upperBand_3 = plot(upperBandValue3, title="Upper Band #3", color=color.teal, offset=offset, display=showBand_3 ? display.all : display.none, editable=showBand_3)
lowerBand_3 = plot(lowerBandValue3, title="Lower Band #3", color=color.teal, offset=offset, display=showBand_3 ? display.all : display.none, editable=showBand_3)
fill(upperBand_3, lowerBand_3, title="Bands Fill #3", color=color.new(color.teal, 95), display=showBand_3 ? display.all : display.none, editable=showBand_3)

// === MOMENTUM INDICATORS ===
// Relative Strength Index (RSI)
rsi_length = 14
rsi = ta.rsi(close, rsi_length)

// Volume Delta & Cumulative Volume Delta
lowerTimeframe = "1"
[openVolume, maxVolume, minVolume, lastVolume] = ta.requestVolumeDelta(lowerTimeframe)
cvd_trend_up = ta.sma(lastVolume, 10) > ta.sma(openVolume, 10)
cvd_trend_down = ta.sma(lastVolume, 10) < ta.sma(openVolume, 10)

// === KELTNER CHANNELS ===
length = 20
mult = 2.0
keltner_src = close
exp = true
BandsStyle = "Average True Range"
atrlength = 10
esma(source, length) => ta.sma(source, length)
ma = esma(keltner_src, length)
rangema = ta.atr(atrlength)
upper = ma + rangema * mult
lower = ma - rangema * mult
plot(upper, color=color.blue, title="Upper")
plot(ma, color=color.blue, title="Basis")
plot(lower, color=color.blue, title="Lower")

// Dynamic Take-Profit based on Keltner Channels & Average True Range
take_profit_factor = (upper - lower) / ma > 0.1 ? 3 : 1.5

// === SCALPING FILTERS ===
enable_cvd = input(true, "Enable CVD Trend", "Uses the Cumulative Volume Delta (CVD) to measure buying or selling pressure. Helps identify trend strength.", "CVD", "Scalping Filters - Momentum", display.none)
enable_ha = input(true, "Enable Heikin-Ashi Trend", "Checks if the Heikin-Ashi trend is bullish or bearish as an additional filter for entries.", "HA", "Scalping Filters - Trend", display.none)
enable_ema = input(true, "Enable EMA Filter", "Requires the price to be above the higher timeframe EMA for a long entry and below it for a short entry.", "EMA", "Scalping Filters - Trend", display.none)
enable_hma = input(true, "Enable HMA Crossover", "Uses the Hull Moving Average (HMA) crossover as a signal for long and short entries.", "HMA", "Scalping Filters - Trend", display.none)
enable_macd = input(true, "Enable MACD Crossover", "Requires the MACD line to make a bullish crossover for a long entry and a bearish crossover for a short entry.", "MACD", "Scalping Filters - Momentum", display.none)
enable_rsi = input(true, "Enable RSI Divergence", "Uses RSI divergence as an additional filter for entries.", "RSI", "Scalping Filters - Momentum", display.none)
enable_vwap = input(true, "Enable VWAP Filter", "Requires the price to be above the VWAP for a long entry and below it for a short entry.", "VWAP", "Scalping Filters - Trend", display.none)
enable_atr = input(true, "Enable ATR Filter", "Uses the Average True Range (ATR) as an additional filter for entries.", "ATR", "Scalping Filters - Volatility", display.none)

// === ENTRY CONDITIONS ===
hma_crossover = ta.crossover(close, hma)
hma_crossunder = ta.crossunder(close, hma)
macd_crossover = ta.crossover(delta, 0)
macd_crossunder = ta.crossunder(delta, 0)
rsi_divergence_up = ta.crossover(rsi, 30)
rsi_divergence_down = ta.crossunder(rsi, 70)
vwap_above = close > vwapValue
vwap_below = close < vwapValue
atr_filter = atr > atr_multiplier

should_buy = 
     (not enable_hma or hma_crossover) and
     (not enable_ema or close > higher_tf_ema) and
     (not enable_ha or is_ha_trend_up) and
     (not enable_cvd or cvd_trend_up) and
     (not enable_macd or macd_crossover) and
     (not enable_rsi or rsi_divergence_up) and
     (not enable_vwap or vwap_above) and
     (not enable_atr or atr_filter)

should_sell = 
     (not enable_hma or hma_crossunder) and
     (not enable_ema or close < higher_tf_ema) and
     (not enable_ha or is_ha_trend_down) and
     (not enable_cvd or cvd_trend_down) and
     (not enable_macd or macd_crossunder) and
     (not enable_rsi or rsi_divergence_down) and
     (not enable_vwap or vwap_below) and
     (not enable_atr or atr_filter)

// === EXIT CONDITIONS ===
should_exit_long = ta.crossunder(delta, 0) or rsi_divergence_down
should_exit_short = ta.crossover(delta, 0) or rsi_divergence_up

// === POSITION MANAGEMENT ===
// Trailing Stop with Dynamic ATR Multiplier based on Spread Volatility
spread_volatility = ta.sma(bid_ask_spread, 14)
dynamic_atr_multiplier = 1 + math.min(spread_volatility * 50, 2)

var float trailing_stop_up = na
var float trailing_stop_down = na

if strategy.position_size > 0
    trailing_stop_up := math.max(trailing_stop_up, close - (atr * dynamic_atr_multiplier))

if strategy.position_size < 0
    trailing_stop_down := math.min(trailing_stop_down, close + (atr * dynamic_atr_multiplier))

trail_up = trailing_stop_up
trail_down = trailing_stop_down

// Stop-Loss and Take-Profit
stop_loss_long = close - (atr * atr_multiplier)
take_profit_long = close + (atr * take_profit_factor)
stop_loss_short = close + (atr * atr_multiplier)
take_profit_short = close - (atr * take_profit_factor)

// Dynamic Position Sizing
risk_percent = input.float(2.5, title="Risk Percentage", minval=1, maxval=100) / 100
position_size = strategy.equity * risk_percent / close

// === EXECUTION & ALERTS ===
if should_buy
    strategy.entry("Long", strategy.long, qty=position_size)
    alert("EXCHANGE=MYOKX;SYMBOL=PIUSD;SIGNAL=BUY;ORDER_TYPE=MARKET;VOLUME=" + str.tostring(strategy.position_size) + ";TP=" + str.tostring(take_profit_long) + ";SL=" + str.tostring(stop_loss_long) + ";TREND=UP;", alert.freq_once_per_bar)

if should_sell
    strategy.entry("Short", strategy.short, qty=position_size)
    alert("EXCHANGE=MYOKX;SYMBOL=PIUSD;SIGNAL=SELL;ORDER_TYPE=MARKET;VOLUME=" + str.tostring(strategy.position_size) + ";TP=" + str.tostring(take_profit_short) + ";SL=" + str.tostring(stop_loss_short) + ";TREND=DOWN;", alert.freq_once_per_bar)

if should_exit_long
    strategy.close("Long")
    alert("EXCHANGE=MYOKX;SYMBOL=PIUSD;SIGNAL=EXIT_LONG;ORDER_TYPE=MARKET;", alert.freq_once_per_bar)

if should_exit_short
    strategy.close("Short")
    alert("EXCHANGE=MYOKX;SYMBOL=PIUSD;SIGNAL=EXIT_SHORT;ORDER_TYPE=MARKET;", alert.freq_once_per_bar)

// === PLOTTING ===
// === HEIKIN-ASHI CHART IDENTIFIER ===
gapsCount = math.sum(low[1] > high or high[1] < low ? 1 : 0, 50)
matchedCandles = math.sum(open == (open[1] + close[1]) / 2 ? 1 : 0, 50)

isHA = matchedCandles == bar_index - 1 and matchedCandles != -1 and gapsCount == -1

labelText = isHA ? "This is Heikin-Ashi Chart" : "This is not Heikin-Ashi Chart"
stats = "\n------------------------------------" +
         "\nBar Index: " + str.tostring(int(bar_index)) +
         "\nMatched: " + str.tostring(matchedCandles)

labelColor = #1e90ff
whiteColor = color.white

var label1 = label.new(
     x=bar_index,
     y=na,
     text="",
     color=labelColor,
     textcolor=whiteColor,
     style=label.style_label_down,
     size=size.normal
     )

label.set_text(label1, labelText + stats)
label.set_xy(label1, bar_index, ta.highest(high, 50))